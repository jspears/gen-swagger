// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

            // Decoder for [Activities]
            Decoders.addDecoder(clazz: [Activities].self) { (source: AnyObject) -> [Activities] in
                return Decoders.decode(clazz: [Activities].self, source: source)
            }
            // Decoder for Activities
            Decoders.addDecoder(clazz: Activities.self) { (source: AnyObject) -> Activities in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Activities()
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"])
                instance.history = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["history"])
                return instance
            }


            // Decoder for [Activity]
            Decoders.addDecoder(clazz: [Activity].self) { (source: AnyObject) -> [Activity] in
                return Decoders.decode(clazz: [Activity].self, source: source)
            }
            // Decoder for Activity
            Decoders.addDecoder(clazz: Activity.self) { (source: AnyObject) -> Activity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Activity()
                instance.uuid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uuid"])
                return instance
            }


            // Decoder for [Error]
            Decoders.addDecoder(clazz: [Error].self) { (source: AnyObject) -> [Error] in
                return Decoders.decode(clazz: [Error].self, source: source)
            }
            // Decoder for Error
            Decoders.addDecoder(clazz: Error.self) { (source: AnyObject) -> Error in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Error()
                instance.code = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.fields = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fields"])
                return instance
            }


            // Decoder for [PriceEstimate]
            Decoders.addDecoder(clazz: [PriceEstimate].self) { (source: AnyObject) -> [PriceEstimate] in
                return Decoders.decode(clazz: [PriceEstimate].self, source: source)
            }
            // Decoder for PriceEstimate
            Decoders.addDecoder(clazz: PriceEstimate.self) { (source: AnyObject) -> PriceEstimate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PriceEstimate()
                instance.productId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["product_id"])
                instance.currencyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency_code"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display_name"])
                instance.estimate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["estimate"])
                instance.lowEstimate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["low_estimate"])
                instance.highEstimate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["high_estimate"])
                instance.surgeMultiplier = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["surge_multiplier"])
                return instance
            }


            // Decoder for [Product]
            Decoders.addDecoder(clazz: [Product].self) { (source: AnyObject) -> [Product] in
                return Decoders.decode(clazz: [Product].self, source: source)
            }
            // Decoder for Product
            Decoders.addDecoder(clazz: Product.self) { (source: AnyObject) -> Product in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Product()
                instance.productId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["product_id"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display_name"])
                instance.capacity = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["capacity"])
                instance.image = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image"])
                return instance
            }


            // Decoder for [Profile]
            Decoders.addDecoder(clazz: [Profile].self) { (source: AnyObject) -> [Profile] in
                return Decoders.decode(clazz: [Profile].self, source: source)
            }
            // Decoder for Profile
            Decoders.addDecoder(clazz: Profile.self) { (source: AnyObject) -> Profile in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Profile()
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_name"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_name"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.picture = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["picture"])
                instance.promoCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["promo_code"])
                return instance
            }
        }
    }
}
